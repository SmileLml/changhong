<?php
helper::importControl('file');
class myfile extends file
{
    public $fileCount = 1;
    public $startLine = 1;
    public $sysField  = array();

    /**
     * init for excel data.
     *
     * @access public
     * @return void
     */
    public function xlsInit()
    {
        $this->phpExcel = $this->app->loadClass('phpexcel');
        $this->fields   = $this->post->fields;
        $this->rows     = $this->post->rows;

        /* Move files field to end. */
        if(isset($this->fields['files']))
        {
            $filesName = $this->fields['files'];
            unset($this->fields['files']);
            $this->fields['files'] = $filesName;
        }

        $this->fieldsKey = array_keys($this->fields);
    }

    /**
     * Export data to Excel. This is main function.
     *
     * @access public
     * @return void
     */
    public function export2Xls()
    {
        $this->xlsInit();
        $this->excelKey  = array();
        for($i = 0; $i < count($this->fieldsKey); $i++) $this->excelKey[$this->fieldsKey[$i]] = $this->setExcelXlsFiled($i);

        $excelProps = $this->phpExcel->getProperties();
        $excelProps->setCreator("ZenTao");
        $excelProps->setLastModifiedBy("ZenTao");
        $excelProps->setTitle("Office XLS Test Document");
        $excelProps->setSubject("Office XLS Test Document");
        $excelProps->setDescription("Test document, generated by PHPExcel.");
        $excelProps->setKeywords("office excel PHPExcel");
        $excelProps->setCategory("Test result file");

        $this->phpExcel->setActiveSheetIndex(0);
        $sheetTitle = isset($this->lang->excel->title->{$this->post->kind}) ? $this->lang->excel->title->{$this->post->kind} : $this->post->kind;
        $excelSheet = $this->phpExcel->getActiveSheet();
        if($sheetTitle) $excelSheet->setTitle($sheetTitle);

        /*Add help lang in start.*/
        if(isset($this->lang->excel->help->{$this->post->kind}))
        {
            $this->startLine = 2;
            $excelSheet->setCellValue("A" . 1, $this->getRequiredFieldsTips($this->post->kind));
            $excelSheet->mergeCells("A1:" . end($this->excelKey) . 1);
        }

        foreach($this->fields as $key => $field) $excelSheet->setCellValue($this->excelKey[$key] . $this->startLine, $field);

        /* Write system data in excel.*/
        $this->writeXlsSysData();

        $i = $this->startLine;
        foreach($this->rows as $num => $row)
        {
            $i ++;
            foreach($row as $key => $value)
            {
                if(isset($this->excelKey[$key]))
                {
                    $value = helper::replaceEmoji($value);

                    /* Merge Cells.*/
                    if(isset($this->post->rowspan[$num]) and is_string($this->post->rowspan[$num]['rows']) and strpos(',' . $this->post->rowspan[$num]['rows'] . ',', ",$key,") !== false)
                    {
                        $excelSheet->mergeCells($this->excelKey[$key] . $i . ':' . $this->excelKey[$key] . ($i + $this->post->rowspan[$num]['num'] - 1));
                    }
                    if(isset($this->post->rowspan[$num]['rows'][$key]))
                    {
                        $excelSheet->mergeCells($this->excelKey[$key] . $i . ':' . $this->excelKey[$key] . ($i + $this->post->rowspan[$num]['rows'][$key] - 1));
                    }
                    if(isset($this->post->colspan[$num]) and strpos(',' . $this->post->colspan[$num]['cols'] . ',', ",$key,") !== false)
                    {
                        $excelSheet->mergeCells($this->excelKey[$key] . $i . ":" . chr(ord($this->excelKey[$key]) + $this->post->colspan[$num]['num'] - 1) . $i);
                    }

                    /* Wipe off html tags.*/
                    if(isset($this->config->excel->editor[$this->post->kind]) and in_array($key, $this->config->excel->editor[$this->post->kind])) $value = $this->file->excludeHtml($value);
                    if(is_numeric($value)) $value = $value . "\t";
                    if($key == 'files')
                    {
                        $this->formatXlsFiles($excelSheet, $i, $value);
                        continue;
                    }
                    if(($key == 'execution' or $key == 'product') and isset($value[1])) $value = $value[1] == ':' ? substr($value, 2) : $value;
                    $excelSheet->setCellValue($this->excelKey[$key] . $i, $value);
                }

                /* Build excel list.*/
                if(!empty($_POST['listStyle']) and in_array($key, $this->post->listStyle)) $this->buildXlsList($excelSheet, $key, $i);
            }
        }

        $initField = isset($this->config->excel->{$this->post->kind}->initField) ? $this->config->excel->{$this->post->kind}->initField : array();
        if(!empty($_POST['extraNum']))
        {
            $i ++;
            $extraNum = $i + $this->post->extraNum;
            for($i; $i < $extraNum; $i++)
            {
                foreach($this->fieldsKey as $field)
                {
                    if(isset($this->excelKey[$field]))
                    {
                        if(($field == 'execution' or $field == 'product') and isset($_POST[$field])) $excelSheet->setCellValue($this->excelKey[$field] . $i, $_POST[$field]);
                        if($field == 'estStarted' or $field == 'deadline') $excelSheet->setCellValue($this->excelKey[$field] . $i, '');
                        if(isset($initField[$field]))
                        {
                            $value = $initField[$field];
                            if(isset($this->config->excel->editor[$this->post->kind]) and in_array($field, $this->config->excel->editor[$this->post->kind])) $value = $this->file->excludeHtml($value);
                            $excelSheet->setCellValue($this->excelKey[$field] . $i, $value);
                        }
                    }

                    /* Build excel list.*/
                    if(!empty($_POST['listStyle']) and in_array($field, $this->post->listStyle)) $this->buildXlsList($excelSheet, $field, $i);
                }
            }
        }

        $this->setXlsStyle($excelSheet, $i);

        /* urlencode the filename for ie. */
        $fileName = $this->post->fileName;
        if(strpos($this->server->http_user_agent, 'Trident') !== false) $fileName = urlencode($fileName);

        $obLevel = ob_get_level();
        for($i = 0; $i < $obLevel; $i++) ob_end_clean();    // clean the ob content to make sure no space or utf-8 bom output.

        /* Safari浏览器下载文件名乱码问题。 */
        if(preg_match("/Safari/", $_SERVER["HTTP_USER_AGENT"]))
        {
            $fileName   = rawurlencode($fileName);
            $attachment = 'attachment; filename*=utf-8\'\'' . $fileName . '.xls';
        }
        else
        {
            $fileName   = str_replace("+", "%20", urlencode($fileName));
            $attachment = "attachment; filename=\"{$fileName}.xls\";";
        }

        setcookie('downloading', 1, 0, $this->config->webRoot);
        header('Content-Type: application/vnd.ms-excel');
        helper::header('Content-Disposition', $attachment);
        header('Cache-Control: max-age=0');

        $excelWriter = PHPExcel_IOFactory::createWriter($this->phpExcel, 'Excel5');
        $excelWriter->setPreCalculateFormulas(false);
        $excelWriter->save('php://output');
        exit;
    }

    /**
     * Set excel style
     *
     * @param  int    $excelSheet
     * @access public
     * @return void
     */
    public function setXlsStyle($excelSheet, $i)
    {
        $endColumn = $this->setExcelXlsFiled(count($this->excelKey) + $this->fileCount - 2);

        /* Set Auto Filter. */
        if($this->rows) $excelSheet->setAutoFilter("A{$this->startLine}:{$endColumn}{$i}");
        /* Freeze column. */
        if(isset($this->config->excel->freeze->{$this->post->kind}))
        {
            $column = $this->excelKey[$this->config->excel->freeze->{$this->post->kind}];
            $excelSheet->FreezePane($column . $this->startLine);
        }

        $tipsHeight = zget($this->config->excel->tipsHeight, $this->post->kind, '');
        if($tipsHeight) $excelSheet->getRowDimension(1)->setRowHeight($tipsHeight);
        $excelSheet->getStyle('A1')->getAlignment()->setWrapText(true);

        /* Set content style for this table.*/
        $contentStyle = array(
            'font'    => array(
                'size' => 9
            ),
            'alignment' => array(
                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                'vertical'   => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                'wrap'       => true
            ),
            'borders' => array(
                'allborders' => array(
                    'style'  => PHPExcel_Style_Border::BORDER_THIN,
                    'color'  => array( 'rgb' => '808080')
                )
            ),
            'fill' => array(
                 'type' => PHPExcel_Style_Fill::FILL_SOLID,
                 'startcolor' => array('argb' => 'FFB2D7EA')
            )
        );

        $this->file->setAreaStyle($excelSheet, $contentStyle, "A1:" . $endColumn . $i);

        /* Set header style for this table.*/
        $headerStyle = array(
            'borders' => array(
                'allborders' => array(
                    'style'  => PHPExcel_Style_Border::BORDER_THIN,
                    'color'  => array( 'rgb' => '808080')
                )
            ),
            'font'    => array(
                'bold'  => true,
                'color' => array( 'rgb' => 'ffffff'),
                'size'  => 9
            ),
            'alignment' => array(
                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
            ),
            'fill' => array(
                 'type'       => PHPExcel_Style_Fill::FILL_SOLID,
                 'startcolor' => array('rgb' => '343399')
            )
        );

        $this->file->setAreaStyle($excelSheet, $headerStyle, 'A' . $this->startLine . ':' . $endColumn . $this->startLine);

        foreach($this->excelKey as $key => $letter)
        {
            $shortWidth = $this->config->excel->width->short;
            $titleWidth = $this->config->excel->width->middle;
            $contWidth  = $this->config->excel->width->long;

            $excelSheet->getColumnDimension($letter)->setWidth(10);
            if(strpos($key, 'Date') !== false) $excelSheet->getColumnDimension($letter)->setWidth(12);
            if(in_array($key, $this->config->excel->shortFields)) $excelSheet->getColumnDimension($letter)->setWidth($shortWidth);
            if(in_array($key, $this->config->excel->titleFields)) $excelSheet->getColumnDimension($letter)->setWidth($titleWidth);
            if(isset($this->config->excel->editor[$this->post->kind]) and in_array($key, $this->config->excel->editor[$this->post->kind])) $excelSheet->getColumnDimension($letter)->setWidth($contWidth);
            if(isset($_POST['width'][$key])) $excelSheet->getColumnDimension($letter)->setWidth($_POST['width'][$key]);

            if(strpos($key, 'Date') !== false or in_array($key, $this->config->excel->dateField))
            {
                $numberFormat = array(
                    'font'    => array(
                        'size' => 9
                    ),
                    'alignment' => array(
                        'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        'wrap'     => true
                    ),
                    'numberformat' => array(
                        'code' => PHPExcel_Style_NumberFormat::FORMAT_DATE_YYYYMMDD2
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN,
                            'color' => array( 'rgb' => '808080')
                        )
                    )
                );
                $this->file->setAreaStyle($excelSheet, $numberFormat, $letter . "3:" . $letter . $i);
            }
        }

        /* Set interlaced color for this table. */
        if(!$this->post->nocolor)
        {
            for($row = 3; $row <= $i; $row++)
            {
                $excelSheet->getRowDimension($row)->setRowHeight($this->config->excel->cellHeight);

                $area  = "A{$row}:{$endColumn}{$row}";
                $color = $row % 2 == 0 ? 'FFB2D7EA' : 'FFdee6fb';
                $excelStyle = $excelSheet->getStyle($area);
                $excelFill  = $excelStyle->getFill();
                $excelFill->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
                $excelFill->getStartColor()->setARGB($color);
            }
        }
    }

    /**
     * Format files field.
     *
     * @param  int    $excelSheet
     * @param  int    $i
     * @param  int    $content
     * @access public
     * @return void
     */
    public function formatXlsFiles($excelSheet, $i, $content)
    {
        if(empty($content)) return;
        $content    = explode('<br />', $content);
        $fileCount  = 0;
        $fieldCount = count($this->excelKey);
        foreach($content as $key => $linkHtml)
        {
            if(empty($linkHtml)) continue;
            $fileCount ++;
            preg_match("/<a href='([^']+)'[^>]*>(.+)<\/a>/", $linkHtml, $out);
            $linkHref = $out[1];
            $linkName = $out[2];
            $fieldName = $this->setExcelXlsFiled($fieldCount + $key - 1);
            $excelSheet->setCellValue($fieldName . $i, $linkName);
            $excelSheet->getCell($fieldName  . $i)->getHyperlink()->setUrl($linkHref);
            $excelSheet->getCell($fieldName  . $i)->getHyperlink()->setTooltip('Navigate to website');
        }

        if($fileCount > $this->fileCount)
        {
            $this->fileCount = $fileCount;
            if(end($this->excelKey) != $fieldName) $excelSheet->mergeCells(end($this->excelKey) . 1 . ":" . $fieldName . 1);
        }
    }

    /**
     * Set excel filed name.
     *
     * @param  int    $count
     * @access public
     * @return void
     */
    public function setExcelXlsFiled($count)
    {
        $letter = 'A';
        for($i = 1; $i <= $count; $i++)$letter++;
        return $letter;
    }

    public function writeXlsSysData()
    {
        $column = 'A';
        if(!empty($this->config->excel->sysDataField))
        {
            $this->phpExcel->createSheet();
            $this->phpExcel->getSheet(1)->setTitle($this->lang->excel->title->sysValue);
        }

        foreach($this->config->excel->sysDataField as $field)
        {
            $listKey = $field . 'List';
            if(isset($_POST[$listKey]) && is_array($_POST[$listKey]))
            {
                $list = array_values($_POST[$listKey]);
                foreach($list as $key => $value)
                {
                    if(is_array($value)) $value = implode(',', $value);
                    $this->phpExcel->getSheet(1)->setCellValue($column . ($key + 1), $value);
                }
            }
            $this->sysField[$field] = $column;
            $column ++;
        }

        // The setFormula1 function cannot insert ')', The composition of dept is 'name(#deptID)', so special processing is required.
        if(!empty($_POST['deptList']))
        {
            if(is_string($_POST['deptList'])) $_POST['deptList'] = explode(',', $_POST['deptList']);
            $deptList = array_values($_POST['deptList']);
            foreach($deptList as $key => $value) $this->phpExcel->getSheet(1)->setCellValue($column . ($key + 1), $value);
            $this->sysField['dept'] = $column;
        }
    }

    public function buildXlsList($excelSheet, $field, $row)
    {
        $listName = $field . 'List';
        $range    = is_array($this->post->$listName) ? '' : '"' . $this->post->$listName . '"';

        $column = zget($this->sysField, $field, '');
        if($column && isset($_POST[$listName]) && is_array($_POST[$listName])) $range = "{$this->lang->excel->title->sysValue}!\${$column}\$1:\${$column}\$" . count($_POST[$listName]);
        if(empty($range)) return false;
        if(!isset($this->excelKey[$field])) return false;

        $objValidation = $excelSheet->getCell($this->excelKey[$field] . $row)->getDataValidation();
        $objValidation->setType(PHPExcel_Cell_DataValidation::TYPE_LIST)
            ->setErrorStyle(PHPExcel_Cell_DataValidation::STYLE_INFORMATION)
            ->setAllowBlank(false)
            ->setShowErrorMessage(true)
            ->setShowDropDown(true)
            ->setErrorTitle($this->lang->excel->error->title)
            ->setError($this->lang->excel->error->info)
            ->setFormula1($range);
    }

    /**
     * get Tips
     *
     * @param  int    $kind
     * @access public
     * @return void
     */
    function getRequiredFieldsTips($kind)
    {
        if(!in_array($kind, $this->config->excel->requiredFieldModule)) return $this->lang->excel->help->$kind;

        $requiredFields = isset($this->config->$kind->create->requiredFields) ? explode(',', $this->config->$kind->create->requiredFields) :  '';
        if(in_array($kind, array('story', 'requirement', 'epic', 'bug', 'testcase')) && $this->session->product)
        {
            $product = $this->loadModel('product')->fetchByID($this->session->product);
            if($product && $product->type != 'normal') $requiredFields[] = 'branch';
        }
        if(empty($requiredFields)) return $requiredFields;

        $tmp = '';
        foreach($requiredFields as $field)
        {
            $tmp .= $this->lang->$kind->$field . ',';
        }

        return sprintf($this->lang->excel->help->$kind, $tmp);
    }
}
